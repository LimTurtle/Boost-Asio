// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CProtocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CProtocol_2eproto;
namespace Protocol {
class S_DATA;
struct S_DATADefaultTypeInternal;
extern S_DATADefaultTypeInternal _S_DATA_default_instance_;
class S_ENEMY;
struct S_ENEMYDefaultTypeInternal;
extern S_ENEMYDefaultTypeInternal _S_ENEMY_default_instance_;
class S_PLYAER;
struct S_PLYAERDefaultTypeInternal;
extern S_PLYAERDefaultTypeInternal _S_PLYAER_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::S_DATA* Arena::CreateMaybeMessage<::Protocol::S_DATA>(Arena*);
template<> ::Protocol::S_ENEMY* Arena::CreateMaybeMessage<::Protocol::S_ENEMY>(Arena*);
template<> ::Protocol::S_PLYAER* Arena::CreateMaybeMessage<::Protocol::S_PLYAER>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum INGAME : int {
  MOVE = 0,
  CHARATERS_CRASH = 1,
  OBSTACLE_CRASH = 2,
  NO_MOVE = 3,
  DROP = 4,
  COMPLTE = 5,
  FAIL = 6,
  PACKET_FAIL = 7,
  OBSTACLE_MOVE = 8,
  INGAME_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  INGAME_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool INGAME_IsValid(int value);
constexpr INGAME INGAME_MIN = MOVE;
constexpr INGAME INGAME_MAX = OBSTACLE_MOVE;
constexpr int INGAME_ARRAYSIZE = INGAME_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* INGAME_descriptor();
template<typename T>
inline const std::string& INGAME_Name(T enum_t_value) {
  static_assert(::std::is_same<T, INGAME>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function INGAME_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    INGAME_descriptor(), enum_t_value);
}
inline bool INGAME_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, INGAME* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<INGAME>(
    INGAME_descriptor(), name, value);
}
// ===================================================================

class S_DATA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DATA) */ {
 public:
  inline S_DATA() : S_DATA(nullptr) {}
  ~S_DATA() override;
  explicit PROTOBUF_CONSTEXPR S_DATA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DATA(const S_DATA& from);
  S_DATA(S_DATA&& from) noexcept
    : S_DATA() {
    *this = ::std::move(from);
  }

  inline S_DATA& operator=(const S_DATA& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DATA& operator=(S_DATA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DATA& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DATA* internal_default_instance() {
    return reinterpret_cast<const S_DATA*>(
               &_S_DATA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_DATA& a, S_DATA& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DATA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DATA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DATA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DATA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DATA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_DATA& from) {
    S_DATA::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DATA* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DATA";
  }
  protected:
  explicit S_DATA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlyaerFieldNumber = 4,
    kEnemyFieldNumber = 5,
    kIdFieldNumber = 1,
    kMapLevelFieldNumber = 2,
    kMatchRoomFieldNumber = 3,
  };
  // repeated .Protocol.S_PLYAER plyaer = 4;
  int plyaer_size() const;
  private:
  int _internal_plyaer_size() const;
  public:
  void clear_plyaer();
  ::Protocol::S_PLYAER* mutable_plyaer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_PLYAER >*
      mutable_plyaer();
  private:
  const ::Protocol::S_PLYAER& _internal_plyaer(int index) const;
  ::Protocol::S_PLYAER* _internal_add_plyaer();
  public:
  const ::Protocol::S_PLYAER& plyaer(int index) const;
  ::Protocol::S_PLYAER* add_plyaer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_PLYAER >&
      plyaer() const;

  // repeated .Protocol.S_ENEMY enemy = 5;
  int enemy_size() const;
  private:
  int _internal_enemy_size() const;
  public:
  void clear_enemy();
  ::Protocol::S_ENEMY* mutable_enemy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ENEMY >*
      mutable_enemy();
  private:
  const ::Protocol::S_ENEMY& _internal_enemy(int index) const;
  ::Protocol::S_ENEMY* _internal_add_enemy();
  public:
  const ::Protocol::S_ENEMY& enemy(int index) const;
  ::Protocol::S_ENEMY* add_enemy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ENEMY >&
      enemy() const;

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 map_level = 2;
  void clear_map_level();
  uint32_t map_level() const;
  void set_map_level(uint32_t value);
  private:
  uint32_t _internal_map_level() const;
  void _internal_set_map_level(uint32_t value);
  public:

  // uint32 match_room = 3;
  void clear_match_room();
  uint32_t match_room() const;
  void set_match_room(uint32_t value);
  private:
  uint32_t _internal_match_room() const;
  void _internal_set_match_room(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_DATA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_PLYAER > plyaer_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ENEMY > enemy_;
    uint32_t id_;
    uint32_t map_level_;
    uint32_t match_room_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_ENEMY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ENEMY) */ {
 public:
  inline S_ENEMY() : S_ENEMY(nullptr) {}
  ~S_ENEMY() override;
  explicit PROTOBUF_CONSTEXPR S_ENEMY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ENEMY(const S_ENEMY& from);
  S_ENEMY(S_ENEMY&& from) noexcept
    : S_ENEMY() {
    *this = ::std::move(from);
  }

  inline S_ENEMY& operator=(const S_ENEMY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENEMY& operator=(S_ENEMY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENEMY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENEMY* internal_default_instance() {
    return reinterpret_cast<const S_ENEMY*>(
               &_S_ENEMY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_ENEMY& a, S_ENEMY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENEMY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENEMY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ENEMY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ENEMY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ENEMY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ENEMY& from) {
    S_ENEMY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ENEMY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ENEMY";
  }
  protected:
  explicit S_ENEMY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ENEMY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLYAER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLYAER) */ {
 public:
  inline S_PLYAER() : S_PLYAER(nullptr) {}
  ~S_PLYAER() override;
  explicit PROTOBUF_CONSTEXPR S_PLYAER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLYAER(const S_PLYAER& from);
  S_PLYAER(S_PLYAER&& from) noexcept
    : S_PLYAER() {
    *this = ::std::move(from);
  }

  inline S_PLYAER& operator=(const S_PLYAER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLYAER& operator=(S_PLYAER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLYAER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLYAER* internal_default_instance() {
    return reinterpret_cast<const S_PLYAER*>(
               &_S_PLYAER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_PLYAER& a, S_PLYAER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLYAER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLYAER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PLYAER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PLYAER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_PLYAER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_PLYAER& from) {
    S_PLYAER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLYAER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLYAER";
  }
  protected:
  explicit S_PLYAER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLYAER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_DATA

// uint32 id = 1;
inline void S_DATA::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t S_DATA::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t S_DATA::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DATA.id)
  return _internal_id();
}
inline void S_DATA::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void S_DATA::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DATA.id)
}

// uint32 map_level = 2;
inline void S_DATA::clear_map_level() {
  _impl_.map_level_ = 0u;
}
inline uint32_t S_DATA::_internal_map_level() const {
  return _impl_.map_level_;
}
inline uint32_t S_DATA::map_level() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DATA.map_level)
  return _internal_map_level();
}
inline void S_DATA::_internal_set_map_level(uint32_t value) {
  
  _impl_.map_level_ = value;
}
inline void S_DATA::set_map_level(uint32_t value) {
  _internal_set_map_level(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DATA.map_level)
}

// uint32 match_room = 3;
inline void S_DATA::clear_match_room() {
  _impl_.match_room_ = 0u;
}
inline uint32_t S_DATA::_internal_match_room() const {
  return _impl_.match_room_;
}
inline uint32_t S_DATA::match_room() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DATA.match_room)
  return _internal_match_room();
}
inline void S_DATA::_internal_set_match_room(uint32_t value) {
  
  _impl_.match_room_ = value;
}
inline void S_DATA::set_match_room(uint32_t value) {
  _internal_set_match_room(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DATA.match_room)
}

// repeated .Protocol.S_PLYAER plyaer = 4;
inline int S_DATA::_internal_plyaer_size() const {
  return _impl_.plyaer_.size();
}
inline int S_DATA::plyaer_size() const {
  return _internal_plyaer_size();
}
inline void S_DATA::clear_plyaer() {
  _impl_.plyaer_.Clear();
}
inline ::Protocol::S_PLYAER* S_DATA::mutable_plyaer(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_DATA.plyaer)
  return _impl_.plyaer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_PLYAER >*
S_DATA::mutable_plyaer() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_DATA.plyaer)
  return &_impl_.plyaer_;
}
inline const ::Protocol::S_PLYAER& S_DATA::_internal_plyaer(int index) const {
  return _impl_.plyaer_.Get(index);
}
inline const ::Protocol::S_PLYAER& S_DATA::plyaer(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_DATA.plyaer)
  return _internal_plyaer(index);
}
inline ::Protocol::S_PLYAER* S_DATA::_internal_add_plyaer() {
  return _impl_.plyaer_.Add();
}
inline ::Protocol::S_PLYAER* S_DATA::add_plyaer() {
  ::Protocol::S_PLYAER* _add = _internal_add_plyaer();
  // @@protoc_insertion_point(field_add:Protocol.S_DATA.plyaer)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_PLYAER >&
S_DATA::plyaer() const {
  // @@protoc_insertion_point(field_list:Protocol.S_DATA.plyaer)
  return _impl_.plyaer_;
}

// repeated .Protocol.S_ENEMY enemy = 5;
inline int S_DATA::_internal_enemy_size() const {
  return _impl_.enemy_.size();
}
inline int S_DATA::enemy_size() const {
  return _internal_enemy_size();
}
inline void S_DATA::clear_enemy() {
  _impl_.enemy_.Clear();
}
inline ::Protocol::S_ENEMY* S_DATA::mutable_enemy(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_DATA.enemy)
  return _impl_.enemy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ENEMY >*
S_DATA::mutable_enemy() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_DATA.enemy)
  return &_impl_.enemy_;
}
inline const ::Protocol::S_ENEMY& S_DATA::_internal_enemy(int index) const {
  return _impl_.enemy_.Get(index);
}
inline const ::Protocol::S_ENEMY& S_DATA::enemy(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_DATA.enemy)
  return _internal_enemy(index);
}
inline ::Protocol::S_ENEMY* S_DATA::_internal_add_enemy() {
  return _impl_.enemy_.Add();
}
inline ::Protocol::S_ENEMY* S_DATA::add_enemy() {
  ::Protocol::S_ENEMY* _add = _internal_add_enemy();
  // @@protoc_insertion_point(field_add:Protocol.S_DATA.enemy)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ENEMY >&
S_DATA::enemy() const {
  // @@protoc_insertion_point(field_list:Protocol.S_DATA.enemy)
  return _impl_.enemy_;
}

// -------------------------------------------------------------------

// S_ENEMY

// uint32 id = 1;
inline void S_ENEMY::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t S_ENEMY::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t S_ENEMY::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENEMY.id)
  return _internal_id();
}
inline void S_ENEMY::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void S_ENEMY::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENEMY.id)
}

// float x = 2;
inline void S_ENEMY::clear_x() {
  _impl_.x_ = 0;
}
inline float S_ENEMY::_internal_x() const {
  return _impl_.x_;
}
inline float S_ENEMY::x() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENEMY.x)
  return _internal_x();
}
inline void S_ENEMY::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void S_ENEMY::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENEMY.x)
}

// float y = 3;
inline void S_ENEMY::clear_y() {
  _impl_.y_ = 0;
}
inline float S_ENEMY::_internal_y() const {
  return _impl_.y_;
}
inline float S_ENEMY::y() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENEMY.y)
  return _internal_y();
}
inline void S_ENEMY::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void S_ENEMY::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENEMY.y)
}

// float z = 4;
inline void S_ENEMY::clear_z() {
  _impl_.z_ = 0;
}
inline float S_ENEMY::_internal_z() const {
  return _impl_.z_;
}
inline float S_ENEMY::z() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENEMY.z)
  return _internal_z();
}
inline void S_ENEMY::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void S_ENEMY::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENEMY.z)
}

// -------------------------------------------------------------------

// S_PLYAER

// float x = 2;
inline void S_PLYAER::clear_x() {
  _impl_.x_ = 0;
}
inline float S_PLYAER::_internal_x() const {
  return _impl_.x_;
}
inline float S_PLYAER::x() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLYAER.x)
  return _internal_x();
}
inline void S_PLYAER::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void S_PLYAER::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLYAER.x)
}

// float y = 3;
inline void S_PLYAER::clear_y() {
  _impl_.y_ = 0;
}
inline float S_PLYAER::_internal_y() const {
  return _impl_.y_;
}
inline float S_PLYAER::y() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLYAER.y)
  return _internal_y();
}
inline void S_PLYAER::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void S_PLYAER::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLYAER.y)
}

// float z = 4;
inline void S_PLYAER::clear_z() {
  _impl_.z_ = 0;
}
inline float S_PLYAER::_internal_z() const {
  return _impl_.z_;
}
inline float S_PLYAER::z() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLYAER.z)
  return _internal_z();
}
inline void S_PLYAER::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void S_PLYAER::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLYAER.z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::INGAME> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::INGAME>() {
  return ::Protocol::INGAME_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CProtocol_2eproto
